#!/bin/bash

source config.ini

if [ -z "$SQL_password" ]
then
  query(){
  mysql -NB -h$DB_IP -P$DB_PORT -u$SQL_user "S1" -e "$2;"
  }
else
  query(){
  mysql -NB -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password "$1" -e "$2;"
  }
fi

# Logging
mkdir -p $PATH_TO_STATS/logs
touch $PATH_TO_STATS/logs/log_$(date '+%Y%m').log
echo "[`date '+%Y%m%d %H:%M:%S'`] Setting.run executed" >> $PATH_TO_STATS/logs/log_$(date '+%Y%m').log

# Check mariadb version
echo ""
DBversion=$(query "$MAD_DB" "SELECT left(version(),4)")
if ((${DBversion/./} > 101)) ;
 then
  echo "MariaDB version check passed"
  echo ""
 else
  echo "Mariadb version should be 10.2 or higher !!!"
  echo ""
  exit
fi

# grrrrrrrrrrr had to implement db version long time ago
# check first install, does stats_worker even exist
first_install=$(query "$MAD_DB" "SELECT count(*) FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$STATS_DB' AND TABLE_NAME = 'stats_worker';")

# Check collation on stats_worker
V1_check1=$(query "$STATS_DB" "SELECT count(*) FROM INFORMATION_SCHEMA.TABLES WHERE table_schema = '$STATS_DB' and table_name = 'stats_worker' and table_collation = 'utf8mb4_unicode_ci';")

# Check if column Area exists in stats_worker
V1_check2=$(query "$STATS_DB" "SELECT count(*) FROM INFORMATION_SCHEMA.COLUMNS where table_schema = '$STATS_DB' and table_name = 'stats_worker' and column_name = 'Area';")

if [ $first_install != "1" ]
  then
  echo "First install of Stats, proceeding"
  statsDBversion=1
  echo ""
  else
  # Check current stats db version
  echo ""
  statsDBversion=$(query "$STATS_DB" "select version from version where version.key = 'stats';")
  echo "Not first install, checking old V1 table updates"
    if [[ $V1_check1 != "1" || $V1_check2 != "1" ]]
    then
    echo "FFS you should have updated long time ago, running old table updates"
    echo "This might take a while"
    echo ""
    cp $PATH_TO_STATS/default_files/table_changes_V1.sql.default $PATH_TO_STATS/table_changes_V1.sql
    sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/table_changes_V1.sql
      if [ -z "$SQL_password" ]
      then
      mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB < $PATH_TO_STATS/table_changes_V1.sql
      rm -f $PATH_TO_STATS/table_changes_V1.sql
      else
      mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB < $PATH_TO_STATS/table_changes_V1.sql
      rm -f $PATH_TO_STATS/table_changes_V1.sql
      fi
    else
    echo "All good, proceeding"
    echo ""
    fi
fi


#Check MAD collation, else 15_worker will fail
table_check=$(query "$MAD_DB" "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_COLLATION FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$MAD_DB' and ((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_location_raw'or TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and TABLE_COLLATION <>'utf8mb4_unicode_ci');")
column_check=$(query "$MAD_DB" "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, COLLATION_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '$MAD_DB' and ((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_location_raw'or TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and COLLATION_NAME <> 'utf8mb4_unicode_ci');")
if [[ -z $table_check || -z $column_check ]];
  then
  echo 'MAD collation check passed'
  echo ""
  else
  echo "ERROR: (some) MAD table/column collation set incorrect !!!"
  echo "Check https://github.com/Map-A-Droid/MAD/tree/master/scripts/SQL and adapt accordingly"
  query "$MAD_DB" "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, TABLE_COLLATION FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$MAD_DB' and ((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_location_raw'or TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and TABLE_COLLATION <>'utf8mb4_unicode_ci');"
  query "$MAD_DB" "SELECT TABLE_CATALOG, TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME, COLLATION_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_SCHEMA = '$MAD_DB' and ((TABLE_NAME = 'trs_stats_detect' or TABLE_NAME = 'trs_stats_location' or TABLE_NAME = 'trs_stats_location_raw'or TABLE_NAME = 'trs_status' or TABLE_NAME = 'trs_stats_detect_mon_raw') and COLLATION_NAME <> 'utf8mb4_unicode_ci');"
  echo ""
  echo ""
  echo "SQL commands below will most likely fix this, but verify before running and execute settings.run afterwards to verify"
  echo "ALTER TABLE $MAD_DB.trs_stats_detect CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
  echo "ALTER TABLE $MAD_DB.trs_stats_location CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
  echo "ALTER TABLE $MAD_DB.trs_stats_location_raw CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;"
  exit
fi

echo "Create sql table, trigger and procedure files"
echo ""
cp $PATH_TO_STATS/default_files/tables.sql.default $PATH_TO_STATS/tables.sql
cp $PATH_TO_STATS/default_files/triggers.sql.default $PATH_TO_STATS/triggers.sql
cp $PATH_TO_STATS/default_files/procedures.sql.default $PATH_TO_STATS/procedures.sql
cd $PATH_TO_STATS && sed -i "s/pogodb/$STATS_DB/g" *.sql
cd $PATH_TO_STATS && sed -i "s/rmdb/$MAD_DB/g" *.sql

echo "Create tables"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB < $PATH_TO_STATS/tables.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB < $PATH_TO_STATS/tables.sql
fi

echo "Create triggers"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $MAD_DB < $PATH_TO_STATS/triggers.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $MAD_DB < $PATH_TO_STATS/triggers.sql
fi

echo "Create procedure"
echo ""
if [ -z "$SQL_password" ]
then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $MAD_DB < $PATH_TO_STATS/procedures.sql
else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $MAD_DB < $PATH_TO_STATS/procedures.sql
fi

echo "Create crontab"
echo ""
cd $PATH_TO_STATS && rm -f *.default
cd $PATH_TO_STATS && rm -f -R sql_cron/
cp $PATH_TO_STATS/default_files/crontab.txt.default $PATH_TO_STATS/crontab.txt
cd $PATH_TO_STATS/cron_files && rm -f *.default
# MAD fence update
if [[ "$FENCE" == "MAD" ]]
echo "Enabling MAD fence updates to Stats"
echo ""
then
  rm -f $PATH_TO_STATS/MAD_fence_update.sh
  if [[ "$MAD_FENCE_UPDATE_INTERVAL" == "day" ]]
  then
  sed -i "$ a \#\# Update MAD fences and devices" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 55 0 * * * cd pathToStatscron_files && ./MAD_fence_update.sh 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
  else
  sed -i "$ a \#\# Update MAD fences and devices" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 55 * * * * cd pathToStatscron_files && ./MAD_fence_update.sh 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
  fi
fi
# Recalc quest routes
if "$recalc_quest_routes"
then
  rm -f $PATH_TO_STATS/quest_recalc.sh
  echo "Set recalculation of quest routes"
  echo ""
  sed -i "$ a \#\# Recalculate quest routes" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 20 0 * * 1 cd pathToStatscron_files && ./quest_recalc.sh 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
if "$QUEST_SPAWN_CLEANUP"
then
  echo "Enabling cleanup spawnponits discovered during questing hours in cron"
  echo ""
  sed -i "$ a \#\# Cleanup spawnpoints discovered during quest scan hours" $PATH_TO_STATS/crontab.txt
  sed -i "$ a $QUEST_SPAWN_CLEAN_MIN $QUEST_SPAWN_CLEAN_HR * * * cd pathToStatscron_files/ && mysql userpass < quest_spawn_cleanup.sql 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
if "$SPAWN_ALL_CLEANUP"
then
  echo "Enabling clean of all spawnpoints unseen or no endtime leaned for X days"
  echo ""
  sed -i "$ a \#\# Cleanup spawnpoints not seen or no entime learned for X days" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 20 23 * * * cd pathToStatscron_files/ && mysql userpass < all_spawn_cleanup.sql 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
if "$SPAWN_UNFENCED_CLEANUP"
then
  echo "Enabling unfenced spawnpoint cleanup in cron"
  echo ""
  sed -i "$ a \#\# Cleaup unfenced spawnpoints" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 50 23 * * * cd pathToStatscron_files/ && ./unfenced_spawn_cleanup.sh 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
# get ATV details
if "$atvdetails"
then
  echo "Set processing of ATVdetails"
  echo ""
  sed -i "$ a \#\# ATV details" $PATH_TO_STATS/crontab.txt
  sed -i "$ a 20 */$atvdetails_hours * * * cd pathToStatscron_files && ./atvdetails.sh 2>>pathToStatslogs/log_\$(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
# add device outage reporting
if "$outage_report"
then
  echo "Adding device outage reporting"
  echo ""
  sed -i "$ a \#\# Device outage report" $PATH_TO_STATS/crontab.txt
  sed -i "$ a */$outage_interval * * * * cd pathToStatsdefault_files && ./discord.sh --username \"Device status\" --color \"16711680\" --avatar \"https://www.iconsdb.com/icons/preview/red/exclamation-xxl.png\" --webhook-url \"outage_webhook\" --description \"$\(mysql userpass MAD_DB -N -e \"select rpad\(concat\('**',c.name,'** >'),18,'>'), concat\('**',if\(a.lastProtoDateTime='','Unknown',time_format\(a.lastProtoDateTime,'\\\%H:\\\%i')),'** <<< '), concat\('IP: ','**',e.ip,'**') from MAD_DB.trs_status a left join MAD_DB.settings_device c on a.device_id = c.device_id left join STATS_DB.ATVgeneral e on c.name = e.origin where \(a.lastProtoDateTime < now\() - interval device_outage minute or a.lastProtoDateTime = '') and date\(e.datetime) = curdate\() order by c.name;\" | jq -Rs . | cut -c 2- | rev | cut -c 2- | rev)\" 2>>pathToStatslogs/log_\$\(date '+\\\%Y\\\%m').log" $PATH_TO_STATS/crontab.txt
fi
PATH_TO_STATS2=$(sed 's@/@\\/@g' <<< $PATH_TO_STATS)
cd $PATH_TO_STATS && sed -i "s/pathToStats/$PATH_TO_STATS2/g" *.txt
cd $PATH_TO_STATS && sed -i "s/STATS_DB/$STATS_DB/g" *.txt
cd $PATH_TO_STATS && sed -i "s/MAD_DB/$MAD_DB/g" *.txt
cd $PATH_TO_STATS && sed -i "s/device_outage/$device_outage/g" *.txt
cd $PATH_TO_STATS && sed -i "s[outage_webhook[$outage_webhook[g" *.txt

if [ -z "$SQL_password" ]
 then
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user/g" $PATH_TO_STATS/crontab.txt
 else
  sed -i "s/userpass/-h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password/g" $PATH_TO_STATS/crontab.txt
fi

# Create area world
if [[ "$FENCE" == "world" ]]
then
  echo "Create world.ini and insert MAD origins into table Area"
  cp $PATH_TO_STATS/areas/area.ini.example $PATH_TO_STATS/areas/world.ini
  sed -i "s/Paris/World/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/50.9876/90/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/50.1234/-90/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/4.1234/-180/g" $PATH_TO_STATS/areas/world.ini
  sed -i "s/4.9876/180/g" $PATH_TO_STATS/areas/world.ini
  if [ -z "$SQL_password" ]
  then
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB -e "insert ignore into $STATS_DB.Area (Origin) select name from $MAD_DB.settings_device;"
  else
  mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB -e "insert ignore into $STATS_DB.Area (Origin) select name from $MAD_DB.settings_device;"
  fi
  echo ""
fi

# Make sure area world does not exist anymore when using box or MAD
if [[ "$FENCE" == "MAD" ]] || [[ "$FENCE" == "box" ]]
then
cd $PATH_TO_STATS/areas && rm -f world.ini
fi

# Create Area files based on world or box (lat/lon max/min)
if [[ "$FENCE" == "world" ]] || [[ "$FENCE" == "box" ]]
then
  echo "Creating area files based on created .ini files"
  echo "!! If you set FENCE=box make sure to assign devices to areas !!"
  cd $PATH_TO_STATS/cron_files && rm -f *.sql && rm -f *.default
  for area in "$PATH_TO_STATS"areas/*.ini
  do
    echo "$area"
    source $area
    cp $PATH_TO_STATS/default_files/15_area.sql.default $PATH_TO_STATS/cron_files/15_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREA_NAME"_area.sql
    sed -i "s/Fency/$AREA_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/cron_files/15_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/60_area.sql.default $PATH_TO_STATS/cron_files/60_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREA_NAME"_area.sql
    sed -i "s/Fency/$AREA_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/cron_files/60_"$AREA_NAME"_area.sql
    cp $PATH_TO_STATS/default_files/1440_area.sql.default $PATH_TO_STATS/cron_files/1440_"$AREA_NAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/1440_"$AREA_NAME"_area.sql
    sed -i "s/Fency/$AREA_NAME/g" $PATH_TO_STATS/cron_files/1440_"$AREA_NAME"_area.sql
    sed -i "s/FENCE_COORDS/$MIN_LAT $MAX_LON, $MAX_LAT $MAX_LON, $MAX_LAT $MIN_LON, $MIN_LAT $MIN_LON, $MIN_LAT $MAX_LON/g" $PATH_TO_STATS/cron_files/1440_"$AREA_NAME"_area.sql
  done
  echo ""
fi

# Create mon_mitm area files based on MAD fences
if [[ "$FENCE" == "MAD" ]]
then
  monareas=$(query "$MAD_DB" "select count(*) from settings_geofence where geofence_id in (select geofence_included from settings_area_mon_mitm);")
  echo "Creating $monareas MAD mon_mitm fence config and area files"
  echo ""
  rm -f $PATH_TO_STATS/areas/*.mad

# get MAD mon_mitm fence data
        while read -r geofence_id name;
        do

        query "$MAD_DB" "SELECT LEFT(fence_data,length(fence_data)-1) from settings_geofence where geofence_id = $geofence_id;" | sed 's/\[\"\[/[/g' | sed 's/",/\n/g' | sed 's/"//g' | sed 's/^ //g' | sed 's/\[/§\[/g' > $PATH_TO_STATS/areas/input


                IFS=§;
                for i in `cat $PATH_TO_STATS/areas/input`;
                do
                        shopt -s lastpipe
                        echo $i | while read -r line;
                                do
                                        if [[ $line == *"["* ]] || [[ $line == *"]"* ]]; then
                                                coord=1
                                                fence=$(echo -n ${line} | sed 's/ /_/g' | tr -d "]" | tr -d "[")
                                                exec > $PATH_TO_STATS/areas/$fence.mad
                                                echo AREA_NAME=\"$name\"
                                                echo -n FENCE_NAME=\"
                                                echo -n "$line" | tr -d "]" | tr -d "["
                                                echo \"
                                        elif [ ! -z "$line" ]; then
                                                if [[ $coord == 1 ]]; then
                                                echo -n POLYGON=\"
                                                fi
                                        echo -n $line | sed s/"]"/\n/ | sed s/,/' '/g
                                        echo -n ", "
                                        let "coord+=1"
                                        fi
                                done
                        echo -n $i | tail +2 | head -1 | sed s/,/' '/g | sed s/$/\"/g
                done | sed s/"(,"/"("/g | sed s/", ,"/,/g
                unset IFS

        done < <(query "$MAD_DB" "$(cat << EOF
        select geofence_id, name from settings_geofence where geofence_id in (select geofence_included from settings_area_mon_mitm);
EOF
        )")
  rm -f $PATH_TO_STATS/areas/input

# create mon_mitm area files
  rm -f $PATH_TO_STATS/cron_files/*.sql
  rm -f $PATH_TO_STATS/cron_files/*.default
  for area in "$PATH_TO_STATS"areas/*.mad
  do
    echo "$area"
    source $area
    FENCENAME=$(echo $FENCE_NAME | sed s/' '/_/g)
    AREANAME=$(echo $AREA_NAME | sed s/' '/_/g)
    cp $PATH_TO_STATS/default_files/15_area.sql.default $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Fency/$FENCE_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area.sql
    cp $PATH_TO_STATS/default_files/60_area.sql.default $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Fency/$FENCE_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area.sql
    cp $PATH_TO_STATS/default_files/1440_area.sql.default $PATH_TO_STATS/cron_files/1440_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/1440_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/Fency/$FENCE_NAME/g" $PATH_TO_STATS/cron_files/1440_"$AREANAME"_"$FENCENAME"_area.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/cron_files/1440_"$AREANAME"_"$FENCENAME"_area.sql
  done
fi

# Add mon_mitm area files for unfenced data
echo ""
echo "Adding area unfenced"
echo ""
cp $PATH_TO_STATS/default_files/15_area_unfenced.sql.default $PATH_TO_STATS/cron_files/15_ZZZZZ_Unfenced_area.sql
cp $PATH_TO_STATS/default_files/60_area_unfenced.sql.default $PATH_TO_STATS/cron_files/60_ZZZZZ_Unfenced_area.sql
cp $PATH_TO_STATS/default_files/1440_area_unfenced.sql.default $PATH_TO_STATS/cron_files/1440_ZZZZZ_Unfenced_area.sql
# sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/cron_files/*_Unfenced_area.sql
# sed -i "s/rmdb/$MAD_DB/g" $PATH_TO_STATS/cron_files/*_Unfenced_area.sql

# Fill table Area
if [[ "$FENCE" == "MAD" ]] && [[ "$MAD_DEVICE_INSERT" == "true" ]]
then
  echo "Adding devices and areas to table Area"
  echo ""
  query "$STATS_DB" "DELETE FROM $STATS_DB.Area;"
  query "$STATS_DB" "INSERT IGNORE INTO $STATS_DB.Area (Area,Origin) SELECT a.name, f.name FROM $MAD_DB.settings_geofence a, $MAD_DB.settings_area_mon_mitm b, $MAD_DB.settings_area c, $MAD_DB.settings_walkerarea d, $MAD_DB.settings_walker_to_walkerarea e, $MAD_DB.settings_device f WHERE a.geofence_id = b.geofence_included and b.area_id = c.area_id and b.area_id = d.area_id and d.walkerarea_id = e.walkerarea_id and e.walker_id = f.walker_id GROUP BY f.name, b.geofence_included;"
fi

# Create pokestop area files based on MAD fences
if [[ "$FENCE" == "MAD" ]]
then
questareas=$(query "$MAD_DB" "select count(*) from settings_geofence where geofence_id in (select geofence_included from settings_area_pokestops where level = 0);")
  if [ $questareas = 0 ]
  then
  echo "no quest areas defined, skip processing"
  else
  echo "$questareas Quest areas found, creating areas from MADdb"
  echo ""
  rm -f $PATH_TO_STATS/areas/*.quest

# get MAD pokestop fence data
        while read -r geofence_id name;
        do

        query "$MAD_DB" "SELECT LEFT(fence_data,length(fence_data)-1) from settings_geofence where geofence_id = $geofence_id;" | sed 's/\[\"\[/[/g' | sed 's/",/\n/g' | sed 's/"//g' | sed 's/^ //g' | sed 's/\[/§\[/g' > $PATH_TO_STATS/areas/input_quest


                IFS=§;
                for i in `cat $PATH_TO_STATS/areas/input_quest`;
                do
                        shopt -s lastpipe
                        echo $i | while read -r line;
                                do
                                        if [[ $line == *"["* ]] || [[ $line == *"]"* ]]; then
                                                coord=1
                                                fence=$(echo -n ${line} | sed 's/ /_/g' | tr -d "]" | tr -d "[")
                                                exec > $PATH_TO_STATS/areas/$fence.quest
                                                echo AREA_NAME=\"$name\"
                                                echo -n FENCE_NAME=\"
                                                echo -n "$line" | tr -d "]" | tr -d "["
                                                echo \"
                                        elif [ ! -z "$line" ]; then
                                                if [[ $coord == 1 ]]; then
                                                echo -n POLYGON=\"
                                                fi
                                        echo -n $line | sed s/"]"/\n/ | sed s/,/' '/g
                                        echo -n ", "
                                        let "coord+=1"
                                        fi
                                done
                        echo -n $i | tail +2 | head -1 | sed s/,/' '/g | sed s/$/\"/g
                done | sed s/"(,"/"("/g | sed s/", ,"/,/g
                unset IFS

        done < <(query "$MAD_DB" "$(cat << EOF
        select geofence_id, name from settings_geofence where geofence_id in (select geofence_included from settings_area_pokestops where level = 0);
EOF
        )")
  rm -f $PATH_TO_STATS/areas/input_quest

# create quest area RPL 15 files
#  rm -f $PATH_TO_STATS/cron_files/*.sql
#  rm -f $PATH_TO_STATS/cron_files/*.default
  for area in "$PATH_TO_STATS"areas/*.quest
  do
    echo "$area"
    source $area
    FENCENAME=$(echo $FENCE_NAME | sed s/' '/_/g)
    AREANAME=$(echo $AREA_NAME | sed s/' '/_/g)
    cp $PATH_TO_STATS/default_files/15_area_quest.sql.default $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/Fency/$FENCE_NAME/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/cron_files/15_"$AREANAME"_"$FENCENAME"_area_quest.sql
    cp $PATH_TO_STATS/default_files/60_area_quest.sql.default $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/Alphen/$AREA_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/Fency/$FENCE_NAME/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area_quest.sql
    sed -i "s/FENCE_COORDS/$POLYGON/g" $PATH_TO_STATS/cron_files/60_"$AREANAME"_"$FENCENAME"_area_quest.sql
  done

#adjust for scanner type
    if [ -z ${vmad+x} ]
    then
      sed -i "s/-- yy //g" $PATH_TO_STATS/cron_files/*_area_quest.sql
    else
      sed -i "s/-- xx //g" $PATH_TO_STATS/cron_files/*_area_quest.sql
    fi
  fi
fi

echo ""
echo "Create remaining cron files"
echo ""
cp $PATH_TO_STATS/default_files/10080_area.sql.default $PATH_TO_STATS/cron_files/10080_area.sql
cp $PATH_TO_STATS/default_files/1440_area_quest.sql.default $PATH_TO_STATS/cron_files/1440_area_quest.sql
cp $PATH_TO_STATS/default_files/10080_area_quest.sql.default $PATH_TO_STATS/cron_files/10080_area_quest.sql
cp $PATH_TO_STATS/default_files/15_worker.sql.default $PATH_TO_STATS/cron_files/15_worker.sql
cp $PATH_TO_STATS/default_files/60_worker.sql.default $PATH_TO_STATS/cron_files/60_worker.sql
cp $PATH_TO_STATS/default_files/1440_worker.sql.default $PATH_TO_STATS/cron_files/1440_worker.sql
cp $PATH_TO_STATS/default_files/10080_worker.sql.default $PATH_TO_STATS/cron_files/10080_worker.sql
cp $PATH_TO_STATS/default_files/quest_spawn_cleanup.sql.default $PATH_TO_STATS/cron_files/quest_spawn_cleanup.sql
cp $PATH_TO_STATS/default_files/all_spawn_cleanup.sql.default $PATH_TO_STATS/cron_files/all_spawn_cleanup.sql
cp $PATH_TO_STATS/default_files/madlog1440.sql.default $PATH_TO_STATS/cron_files/madlog1440.sql
cp $PATH_TO_STATS/default_files/madlog10080.sql.default $PATH_TO_STATS/cron_files/madlog10080.sql
cp $PATH_TO_STATS/default_files/madlog_worker1440.sql.default $PATH_TO_STATS/cron_files/madlog_worker1440.sql
cp $PATH_TO_STATS/default_files/madlog_worker10080.sql.default $PATH_TO_STATS/cron_files/madlog_worker10080.sql
cp $PATH_TO_STATS/default_files/15_vmlog.sql.default $PATH_TO_STATS/cron_files/15_vmlog.sql
cp $PATH_TO_STATS/default_files/60_vmlog.sql.default $PATH_TO_STATS/cron_files/60_vmlog.sql
cp $PATH_TO_STATS/default_files/1440_vmlog.sql.default $PATH_TO_STATS/cron_files/1440_vmlog.sql
cp $PATH_TO_STATS/default_files/10080_vmlog.sql.default $PATH_TO_STATS/cron_files/10080_vmlog.sql
cp $PATH_TO_STATS/default_files/1440_atvstats.sql.default $PATH_TO_STATS/cron_files/1440_atvstats.sql
sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/rmdb/$MAD_DB/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/RPL15/$RPL15/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/RPL60/$RPL60/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/RPL1440/$RPL1440/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/RPL10080/$RPL10080/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/QUEST_START/$QUEST_START/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/QUEST_END/$QUEST_END/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/SPAWN_UNSEEN_DAYS/$SPAWN_UNSEEN_DAYS/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/SPAWN_NO_ENDTIME_DAYS/$SPAWN_NO_ENDTIME_DAYS/g" $PATH_TO_STATS/cron_files/*.sql
sed -i "s/SPAWNDEF15_HOURS/$SPAWNDEF15_HOURS/g" $PATH_TO_STATS/cron_files/*.sql

echo "Creating grafana files"
echo ""
DS_STATS="${DataSource_stats^^}"
DS_MAD="${DataSource_MAD^^}"
mkdir -p $PATH_TO_STATS/grafana
cd $PATH_TO_STATS/grafana/ && rm -f *.json && rm -f *.default
cp $PATH_TO_STATS/default_files/01_stats_kpi.json.default $PATH_TO_STATS/grafana/01_stats_kpi.json
cp $PATH_TO_STATS/default_files/02_stats_network_area.json.default $PATH_TO_STATS/grafana/02_stats_network_area.json
cp $PATH_TO_STATS/default_files/03_stats_network_area_ex.json.default $PATH_TO_STATS/grafana/03_stats_network_area_ex.json
cp $PATH_TO_STATS/default_files/04_stats_worker.json.default $PATH_TO_STATS/grafana/04_stats_worker.json
cp $PATH_TO_STATS/default_files/05_stats_unfenced.json.default $PATH_TO_STATS/grafana/05_stats_unfenced.json
cp $PATH_TO_STATS/default_files/06_nearby_fenced.json.default $PATH_TO_STATS/grafana/06_nearby_fenced.json
cp $PATH_TO_STATS/default_files/07_stats_area_quest.json.default $PATH_TO_STATS/grafana/07_stats_area_quest.json
cp $PATH_TO_STATS/default_files/10_ATVdetails.json.default $PATH_TO_STATS/grafana/10_ATVdetails.json
cp $PATH_TO_STATS/default_files/11_stats_atvdetails_combined.json.default $PATH_TO_STATS/grafana/11_stats_atvdetails_combined.json
cp $PATH_TO_STATS/default_files/12_stats_atvdetails_combined_ex.json.default $PATH_TO_STATS/grafana/12_stats_atvdetails_combined_ex.json
cp $PATH_TO_STATS/default_files/13_device_overview.json.default $PATH_TO_STATS/grafana/13_device_overview.json
cp $PATH_TO_STATS/default_files/14_device_stability.json.default $PATH_TO_STATS/grafana/14_device_stability.json
cp $PATH_TO_STATS/default_files/15_device_temperature_overview.json.default $PATH_TO_STATS/grafana/15_device_temperature_overview.json
cp $PATH_TO_STATS/default_files/20_mad_stuff.json.default $PATH_TO_STATS/grafana/20_mad_stuff.json
cp $PATH_TO_STATS/default_files/21_mad_cpu_mem.json.default $PATH_TO_STATS/grafana/21_mad_cpu_mem.json
cp $PATH_TO_STATS/default_files/30_mon_stuff.json.default $PATH_TO_STATS/grafana/30_mon_stuff.json
cp $PATH_TO_STATS/default_files/50_mad_log_error.json.default $PATH_TO_STATS/grafana/50_mad_log_error.json
cp $PATH_TO_STATS/default_files/51_mad_log_warning.json.default $PATH_TO_STATS/grafana/51_mad_log_warning.json
cp $PATH_TO_STATS/default_files/52_mad_log_worker_error.json.default $PATH_TO_STATS/grafana/52_mad_log_worker_error.json
cp $PATH_TO_STATS/default_files/53_mad_log_worker_warning.json.default $PATH_TO_STATS/grafana/53_mad_log_worker_warning.json
cp $PATH_TO_STATS/default_files/60_vm_log.json.default $PATH_TO_STATS/grafana/60_vm_log.json
cp $PATH_TO_STATS/default_files/vm_10_ATVdetails.json.default $PATH_TO_STATS/grafana/vm_10_ATVdetails.json
cp $PATH_TO_STATS/default_files/vm_13_device_overview.json.default $PATH_TO_STATS/grafana/vm_13_device_overview.json
cp $PATH_TO_STATS/default_files/vm_16_atv_performance.json.default $PATH_TO_STATS/grafana/vm_16_atv_performance.json
cp $PATH_TO_STATS/default_files/vm_02_stats_network_area.json.default $PATH_TO_STATS/grafana/vm_02_stats_network_area.json
cp $PATH_TO_STATS/default_files/vm_04_stats_worker.json.default $PATH_TO_STATS/grafana/vm_04_stats_worker.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/pogodb/$DataSource_stats/g" *.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/rmdb/$DataSource_MAD/g" *.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/POGODB/$DS_STATS/g" *.json
cd $PATH_TO_STATS/grafana/ && sed -i "s/RMDB/$DS_MAD/g" *.json

#MAD log process check
if [ -z "$SQL_password" ]
then
  firstInstall=$(mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB -N -se "SELECT count(*) FROM error;")
else
  firstInstall=$(mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB -N -se "SELECT count(*) FROM error;")
fi

#firstInstall=0

if "$madlog"
then
  if [ $firstInstall = 0 ]
  then
    echo ""
    echo "No MAD logs processed yet, do you wish to process last 6 days?"
    read -p "Continue (y/n)?" choice
    if [ $choice = "y" ] || [ $choice = "yes" ] || [ $choice = "Y" ] || [ $choice = "Yes" ]
    then
      hoursback=144
      while test $hoursback != 0
      do
        echo ""
        echo ""
        echo "Hourly data: processing now - $hoursback hours"
        echo ""
        cp $PATH_TO_STATS/cron_files/60_madlog.sh $PATH_TO_STATS/cron_files/madlog.sh.tmp
        sed -i "s/1 hour ago/$hoursback hour ago/g" $PATH_TO_STATS/cron_files/madlog.sh.tmp
        cd $PATH_TO_STATS/cron_files && ./madlog.sh.tmp
        rm $PATH_TO_STATS/cron_files/madlog.sh.tmp
        hoursback="$(( hoursback - 1 ))"
      done
    fi
    if [ $choice = "y" ] || [ $choice = "yes" ] || [ $choice = "Y" ] || [ $choice = "Yes" ]
    then
      hoursback=8640
      while test $hoursback != 0
      do
        echo ""
        echo ""
        echo "Daily data: processing now - $hoursback minutes"
        echo ""
        cp $PATH_TO_STATS/default_files/madlog1440.sql.default $PATH_TO_STATS/default_files/madlog1440.sql.tmp
        sed -i "s/interval 1440 minute/interval $hoursback minute/g" $PATH_TO_STATS/default_files/madlog1440.sql.tmp
        sed -i "s/pogodb/$STATS_DB/g" $PATH_TO_STATS/default_files/madlog1440.sql.tmp
        if [ -z "$SQL_password" ]
          then
            mysql -h$DB_IP -P$DB_PORT -u$SQL_user $STATS_DB < $PATH_TO_STATS/default_files/madlog1440.sql.tmp
          else
            mysql -h$DB_IP -P$DB_PORT -u$SQL_user -p$SQL_password $STATS_DB < $PATH_TO_STATS/default_files/madlog1440.sql.tmp
        fi
        rm $PATH_TO_STATS/default_files/madlog1440.sql.tmp
        hoursback="$(( hoursback - 1440 ))"
      done
    fi
  fi
fi

# Migrate ATVdetails to seperate tables
if [ $first_install != "1" ]
  then
  echo "First install of Stats nothing to migrate, proceeding"
  echo ""
  else
  if (( $statsDBversion < 13 ))
    then
    echo ""
    echo "Migrating ATVdetails to seperate tables"
    echo ""
    query "$STATS_DB" "INSERT IGNORE INTO ATVgeneral (datetime,origin,arch,rom,vm_script,mitm,pogo,rgc,pogodroid,vmapper,pogo_update,pd_update,vm_update,rgc_update,pingreboot,temperature,magisk,magisk_modules,MACw,MACe,ip,gmail) select datetime,origin,arch,rom,VM_script,mitm,pogo,rgc,pogodroid,vmapper,pogo_update,pd_update,VM_Autoupdate,rgc_update,pingreboot,temperature,magisk,magisk_modules,MACw,MACe,ip,gmail from ATVdetails;"
    query "$STATS_DB" "INSERT IGNORE INTO ATVpd (datetime,origin,auth_username,auth_password,user_login,auth_id,auth_token,post_destination,boot_delay,injection_delay,switch_disable_last_sent,intentional_stop,switch_send_protos,last_time_injected,switch_disable_external_communication,last_pid_injected,switch_enable_oomadj,switch_enable_auth_header,switch_send_raw_protos,switch_popup_last_sent,full_daemon,switch_enable_mock_location_patch,last_system_patch_timestamp,last_sys_inj,default_mappging_mode,switch_setenforce,post_destination_raw,session_id,libfilename,latest_version_known,disable_pogo_freeze_detection) SELECT datetime,origin,PD_auth_username,PD_auth_password,PD_user_login,PD_auth_id,PD_auth_token,PD_post_destination,PD_boot_delay,PD_injection_delay,PD_switch_disable_last_sent,PD_intentional_stop,PD_switch_send_protos,PD_last_time_injected,PD_switch_disable_external_communication,PD_last_pid_injected,PD_switch_enable_oomadj,PD_switch_enable_auth_header,PD_switch_send_raw_protos,PD_switch_popup_last_sent,PD_full_daemon,PD_switch_enable_mock_location_patch, PD_last_system_patch_timestamp,PD_last_sys_inj,PD_default_mappging_mode,PD_switch_setenforce,PD_post_destination_raw,PD_session_id,PD_libfilename,PD_latest_version_known,PD_disable_pogo_freeze_detection FROM ATVdetails;"
    query "$STATS_DB" "INSERT IGNORE INTO ATVrgc (datetime,origin,auth_username,auth_password,websocket_uri,boot_delay,mediaprojection_previously_started,suspended_mocking,reset_agps_once,overwrite_fused,switch_enable_auth_header,reset_agps_continuously,reset_google_play_services,last_location_longitude,last_location_altitude,last_location_latitude,boot_startup,use_mock_location,oom_adj_override,location_reporter_service_running,stop_location_provider_service,autostart_services) SELECT datetime,origin,RGC_auth_username,RGC_auth_password,RGC_websocket_uri,RGC_boot_delay,RGC_mediaprojection_previously_started,RGC_suspended_mocking,RGC_reset_agps_once,RGC_overwrite_fused,RGC_switch_enable_auth_header,RGC_reset_agps_continuously,RGC_reset_google_play_services,RGC_last_location_longitude,RGC_last_location_altitude,RGC_last_location_latitude,RGC_boot_startup,RGC_use_mock_location,RGC_oom_adj_override,RGC_location_reporter_service_running,RGC_stop_location_provider_service,RGC_autostart_services FROM ATVdetails;"
    query "$STATS_DB" "INSERT IGNORE INTO ATVvm (datetime,origin,bootdelay,gzip,betamode,patchedpid,selinux,daemon,authpassword,authuser,injector,authid,postdest,fridastarted,fridaver,openlucky) SELECT datetime,origin,VM_bootdelay,VM_gzip,VM_betamode,VM_patchedpid,VM_selinux,VM_daemon,VM_authpassword,VM_authuser,VM_injector,VM_authid,VM_postdest,VM_fridastarted,VM_fridaver,VM_openlucky FROM ATVdetails;"
  fi
fi

# fix double job_wait in config.ini
if [[ $(grep -w job_wait $PATH_TO_STATS/config.ini | wc -l) == 2 ]]
then
echo "some idiot put 2x job_wait in config.ini, changing the one from ATVdeails to job_wait_atv"
echo ""
sed -i '0,/job_wait/s//job_wait_atv/' $PATH_TO_STATS/config.ini
else
  if [[ $(grep -w job_wait $PATH_TO_STATS/config.ini | wc -l) == 1 ]] && [[ $(grep -w job_wait_atv $PATH_TO_STATS/config.ini | wc -l) == 0 ]]
  then
  sed -i '0,/job_wait/s//job_wait_atv/' $PATH_TO_STATS/config.ini
  fi
fi

## Checks
# Make sure QUEST_END is set when using spawndef reset
if "$SPAWNDEF15_CLEANUP"
  then
  if [[ $QUEST_END = "06:00:00" ]]
    then
    echo "Warning: QUEST_END is set to default, make sure it matches your setup"
  fi
fi
# Make sure mon backup is enabled is set when using spawndef reset
#if "$SPAWNDEF15_CLEANUP"
#  then
#  if [[ $mon_backup = "false" ]]
#    then
#    echo "ERROR: mon_backup needs to be enabled in order to use hourly spawndef reset/cleanup"
#  fi
#fi
# Make sure not to delete pokemon_history when mon_backup is enabled
if "$monthly_mon_table"
  then
  if "$mon_cleanup"
    then
    echo "ERROR: make sure to disable mon_cleanup as your monthly backup will be incomplete otherwise"
  fi
fi

echo ''

echo "All done"
