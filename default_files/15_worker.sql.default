set collation_connection = 'utf8mb4_unicode_ci';
-- Settings

select @Datetime := concat(date(now() - interval 15 minute),' ', SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 15 minute)) DIV 900) * 900));
select @Datetime_p1 := concat(date(now() - interval 15 minute),' ', (SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 15 minute)) DIV 900) * 900)));
select @Datetime_p16 := concat(date(now() - interval 0 minute),' ', (SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 0 minute)) DIV 900) * 900)));
select @Datetime_p26 := concat(date(now() + interval 15 minute),' ', (SEC_TO_TIME((TIME_TO_SEC(time(now() + interval 15  minute)) DIV 900) * 900)));
select @Datetime_m15 := concat(date(now() - interval 30 minute),' ', (SEC_TO_TIME((TIME_TO_SEC(time(now() - interval 30 minute)) DIV 900) * 900)));
select @RPL := '15';

-- allow MAD to insert data before we start processing
select if(@datetime_p16 + interval 1 minute < now(), "proceed", (select sleep(90)));

-- table trs_stats_detect data

Create TEMPORARY TABLE rmdb.tmp41
AS(
select
count(timestamp_scan)*5 as TRPL,
worker,
sum(mon) as Tmon,
sum(mon_iv) as IVmon ,
sum(mon)-sum(mon_iv) as Mon,
sum(quest) as Quest,
sum(raid) as Raid
from rmdb.trs_stats_detect
where from_unixtime(timestamp_scan) >= @Datetime_p1 and from_unixtime(timestamp_scan) < @Datetime_p16
group by worker
);

-- table trs_stats_location_raw data

Create TEMPORARY TABLE rmdb.locrawprep
AS(
select
worker,
success,
transporttype,
fix_ts,
count(fix_ts) as 'numRep',
max(data_ts) as 'max_data_ts'

from rmdb.trs_stats_location_raw
where from_unixtime(period) >= @Datetime_p1 and from_unixtime(period) < @Datetime_p16

group by worker,fix_ts
);

Create TEMPORARY TABLE rmdb.tmp42
AS(
select
worker,
count(fix_ts) as `Tloc`,
sum(success) as `LocOk`,
count(fix_ts)-sum(success) as `LocNok`,
(count(fix_ts)-sum(success))/(count(fix_ts)+1)*100 as `LocFR`,
sum(numRep) as `locReports`
from rmdb.locrawprep
where transporttype <> 99
group by worker
);

Create TEMPORARY TABLE rmdb.tmp45
AS(
select
worker,
count(transporttype) as Tp,
sum(success) as TpOk,
count(transporttype)-sum(success) as TpNok,
(count(transporttype)-sum(success))/(count(transporttype)+0.000001)*100 as TpFR
from rmdb.locrawprep
where transporttype = 0
group by worker
);

Create TEMPORARY TABLE rmdb.tmp46
AS(
select
worker,
count(transporttype) as Wk,
sum(success) as WkOk,
count(transporttype)-sum(success) as WkNok,
(count(transporttype)-sum(success))/(count(transporttype)+0.00001)*100 as WkFR
from rmdb.locrawprep
where transporttype = 1
group by worker
);

Create TEMPORARY TABLE rmdb.tmp47
AS(
select
worker,
sum(timestampdiff(second,from_unixtime(fix_ts),from_unixtime(max_data_ts))) as TpSt
from rmdb.locrawprep
where transporttype = 0 and success = 1 and fix_ts <> 0 and max_data_ts <> 0
group by worker
);

Create TEMPORARY TABLE rmdb.tmp48
AS(
select
worker,
sum(timestampdiff(second,from_unixtime(fix_ts),from_unixtime(max_data_ts))) as WkSt
from rmdb.locrawprep
where transporttype = 1 and success = 1 and fix_ts <> 0 and max_data_ts <> 0
group by worker
);

Create TEMPORARY TABLE rmdb.tmp52
AS(
select
worker,
count(worker) as exReps
from rmdb.locrawprep
where (transporttype = 1 or transporttype = 0) and success = 1 and (fix_ts = 0 or max_data_ts = 0)
group by worker
);

Create TEMPORARY TABLE rmdb.tmp51
AS(
select
worker,
count(numRep) as `locationsMultiReport`
from rmdb.locrawprep
where transporttype <> 99 and numRep > 1
group by worker
);

-- table trs_status data

Create TEMPORARY TABLE rmdb.tmp43
AS(
select
a.Worker,
avg(a.ResTot) as ResTot,
avg(a.RebTot) as Rebtot
from pogodb.stats_worker a
where a.Datetime = @Datetime_m15 and a.RPL = 15
group by a.Worker
);

Create TEMPORARY TABLE rmdb.tmp44
AS(
select
c.name as worker,
IF(a.globalrestartcount-b.ResTot<0,0,a.globalrestartcount-b.ResTot) as Res,
IF(a.globalrebootcount-b.RebTot<0,0,a.globalrebootcount-b.RebTot) as Reb,
a.globalrestartcount as ResTot,
a.globalrebootcount as RebTot
from rmdb.trs_status a
left join rmdb.settings_device c on a.device_id = c.device_id
left join rmdb.tmp43 b on c.name = b.Worker COLLATE utf8mb4_unicode_ci
);

-- table trs_stats_detect_mon_raw data

Create TEMPORARY TABLE rmdb.tmp49
AS(
select
worker,
sum(is_shiny) as `Shiny`
from rmdb.trs_stats_detect_mon_raw
where
from_unixtime(timestamp_scan) >= @Datetime_p1 and from_unixtime(timestamp_scan) < @Datetime_p16
group by worker
);

-- Fill data for current interval
UPDATE pogodb.stats_worker z
left join rmdb.tmp44 a on z.worker = a.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp41 b on z.worker = b.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp42 c on z.worker = c.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp45 d on z.worker = d.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp46 e on z.worker = e.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp47 f on z.worker = f.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp48 g on z.worker = g.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp49 h on z.worker = h.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp51 i on z.worker = i.worker COLLATE utf8mb4_unicode_ci
left join rmdb.tmp52 j on z.worker = j.worker COLLATE utf8mb4_unicode_ci
SET z.TRPL=b.TRPL, z.Tmon=b.Tmon, z.IVmon=b.IVmon, z.Mon=b.Mon, z.Quest=b.Quest, z.Raid=b.Raid, z.Tloc=c.Tloc, z.LocOk=c.LocOk, z.LocNok=c.LocNok, z.LocFR=c.LocFR, z.Tp=d.Tp, z.TpOk=d.TpOk, z.TpNok=d.TpNok, z.TpFR=d.TpFR, z.TpSt=f.TpSt, z.Wk=e.Wk, z.WkOk=e.WkOk, z.WkNok=e.WkNok, z.WkFR=e.WkFR, z.WkSt=g.WkSt, z.exReps=j.exReps, z.locReports=c.locReports, z.locationsMultiReport=i.locationsMultiReport, z.Shiny=h.Shiny, z.Res=a.Res, z.Reb=a.Reb, z.ResTot=a.ResTot, z.RebTot=a.RebTot
WHERE
z.Datetime = @Datetime
;

-- Add Area data on next interval
-- get data
Create TEMPORARY TABLE rmdb.tmp50
AS(
select
d.name as 'worker', b.name as 'Area'
from
rmdb.trs_status a, rmdb.settings_geofence b,
(
   SELECT area_id, geofence_included FROM rmdb.settings_area_mon_mitm
   UNION
   SELECT area_id, geofence_included FROM rmdb.settings_area_pokestops
   UNION
   SELECT area_id, geofence_included FROM rmdb.settings_area_raids_mitm
   UNION
   SELECT area_id, geofence_included FROM rmdb.settings_area_raids_mitm
   UNION
   SELECT area_id, geofence_included FROM rmdb.settings_area_idle
) c, rmdb.settings_device d
WHERE
a.area_id = c.area_id AND
c.geofence_included = b.geofence_id AND
d.device_id = a.device_id
);
-- update next interval 
UPDATE pogodb.stats_worker z
LEFT JOIN rmdb.tmp50 a ON z.worker = a.worker COLLATE utf8mb4_unicode_ci
SET z.Area=a.Area
WHERE z.Datetime = @Datetime_p16
;

-- Insert 2nd next interval
INSERT INTO pogodb.stats_worker (Datetime,RPL, Worker)
select @Datetime_p26, @RPL, d.name
from rmdb.settings_device d
;

-- drop temp tables
drop table rmdb.tmp41;
drop table rmdb.tmp42;
drop table rmdb.tmp43;
drop table rmdb.tmp44;
drop table rmdb.tmp45;
drop table rmdb.tmp46;
drop table rmdb.tmp47;
drop table rmdb.tmp48;
drop table rmdb.tmp49;
drop table rmdb.tmp50;
drop table rmdb.tmp51;
drop table rmdb.tmp52;
drop table rmdb.locrawprep;
